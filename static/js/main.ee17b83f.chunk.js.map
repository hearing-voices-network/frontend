{"version":3,"sources":["components/PatternLibrary.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PatternLibrary","className","library","add","fas","App","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAoDeA,G,YAhDQ,kBACrB,yBAAKC,UAAU,6CACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,WACA,uBAAGA,UAAU,eAAb,cAEA,wBAAIA,UAAU,cAAd,kCACA,uBAAGA,UAAU,eAAb,aAEA,wBAAIA,UAAU,cAAd,cACA,uBAAGA,UAAU,eAAb,aAEA,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,eAAb,aAEA,wBAAIA,UAAU,eAAd,oBACA,uBAAGA,UAAU,eAAb,cAEA,uBAAGA,UAAU,WAAb,kIAIA,uBAAGA,UAAU,eAAb,UAEA,uBAAGA,UAAU,WAAb,2BACA,uBAAGA,UAAU,eAAb,UAEA,uBAAGA,UAAU,eAAb,sBACA,uBAAGA,UAAU,eAAb,gBAEA,uBAAGA,UAAU,WAAb,6CACA,uBAAGA,UAAU,eAAb,UAEA,uBAAGA,UAAU,eAAb,kFAIA,uBAAGA,UAAU,eAAb,gBAEA,uBAAGA,UAAU,YAAb,kFAIA,uBAAGA,UAAU,eAAb,eCxCNC,IAAQC,IAAIC,KAEZ,IAQeC,EARgB,kBAC7B,yBAAKJ,UAAU,kBACb,yBAAKA,UAAU,eAAeK,MAAO,CAAEC,UAAW,SAChD,kBAAC,EAAD,SCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ee17b83f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./PatternLibrary.scss\";\n\nconst PatternLibrary = () => (\n  <div className=\"flex-container flex-container--no-padding\">\n    <div className=\"flex-col--12\">\n      <h1 className=\"heading--xl\">Welcome</h1>\n      <p className=\"description\">XL Heading</p>\n\n      <h2 className=\"heading--l\">Read other peoples experiences</h2>\n      <p className=\"description\">L Heading</p>\n\n      <h3 className=\"heading--m\">Contact us</h3>\n      <p className=\"description\">M Heading</p>\n\n      <h4 className=\"heading--s\">Email us at</h4>\n      <p className=\"description\">S Heading</p>\n\n      <h5 className=\"heading--xs\">Read whole story</h5>\n      <p className=\"description\">XS Heading</p>\n\n      <p className=\"body--l\">\n        Collecting first-person accounts of voices, from people who hear voices.\n        This is a place where you can explore and share…\n      </p>\n      <p className=\"description\">L Body</p>\n\n      <p className=\"body--m\">info@hearing-voices.org</p>\n      <p className=\"description\">M Body</p>\n\n      <p className=\"body--m-alt\">About this project</p>\n      <p className=\"description\">M Body (Alt)</p>\n\n      <p className=\"body--s\">Created by Hearing Voices Network England</p>\n      <p className=\"description\">S Body</p>\n\n      <p className=\"body--s-alt\">\n        Signing up is secure and how much you share is up to you, you can\n        always…\n      </p>\n      <p className=\"description\">S Body (Alt)</p>\n\n      <p className=\"body--xs\">\n        Signing up is secure and how much you share is up to you, you can\n        always…\n      </p>\n      <p className=\"description\">XS Body</p>\n    </div>\n  </div>\n);\n\nexport default PatternLibrary;\n","import React, { FunctionComponent } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./styles/main.scss\";\n\nimport PatternLibrary from \"./components/PatternLibrary\";\n\nlibrary.add(fas);\n\nconst App: FunctionComponent = () => (\n  <div className=\"flex-container\">\n    <div className=\"flex-col--12\" style={{ marginTop: \"20px\" }}>\n      <PatternLibrary />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}