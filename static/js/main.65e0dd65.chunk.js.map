{"version":3,"sources":["components/Accordian/index.ts","components/Accordian/Accordian.tsx","components/AboutAccordian/index.ts","components/AboutAccordian/AboutAccordian.tsx","components/Breadcrumb/index.ts","components/Breadcrumb/Breadcrumb.tsx","components/Pagination/index.ts","components/Pagination/Pagination.tsx","components/Button/index.ts","components/Button/Button.tsx","components/PatternLibrary.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Accordian","children","title","green","subtitle","useState","open","toggleAccordian","className","cx","onClick","aria-expanded","aria-controls","id","icon","aria-labelledby","AboutAccordian","text","Breadcrumb","crumbs","map","crumb","i","key","url","href","length","PaginationControl","currentPage","totalItems","itemsPerPage","useEffect","input","document","getElementsByTagName","paginationCount","createElement","textContent","replaceWith","simple","defaultCurrent","current","total","pageSize","locale","localeInfo","prevIcon","nextIcon","Button","type","disabled","twoCol","small","filter","PatternLibrary","console","log","library","add","fas","App","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65e0dd65.chunk.js","sourcesContent":["import Accordian from \"./Accordian\";\n\nexport default Accordian;\n","import React, { useState, FunctionComponent } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport cx from \"classnames\";\n\nimport \"./Accordian.scss\";\n\ninterface IProps {\n  children: JSX.Element | JSX.Element[];\n  title: string;\n  subtitle?: string;\n  green?: boolean;\n}\n\nconst Accordian: React.FunctionComponent<IProps> = ({\n  children,\n  title,\n  green,\n  subtitle\n}) => {\n  const [open, toggleAccordian] = useState(false);\n\n  return (\n    <div className=\"accordian--container\">\n      <button\n        className={cx(\n          \"flex-container flex-container--no-padding flex-container--align-center accordian--header\",\n          {\n            \"accordian--header--green\": green\n          }\n        )}\n        onClick={() => toggleAccordian(!open)}\n        aria-expanded={open}\n        aria-controls=\"accordian-content\"\n        id=\"accordian-header\"\n      >\n        <div className=\"accordian--title-container flex-container flex-container--no-padding flex-container--no-space flex-container--align-center\">\n          <p className=\"accordian--title\">{title}</p>\n          {subtitle && <p className=\"accordian--subtitle\">{subtitle}</p>}\n        </div>\n        <FontAwesomeIcon\n          icon=\"chevron-down\"\n          className={cx(\"accordian--icon\", {\n            \"accordian--icon--open\": open,\n            \"accordian--icon--green\": green\n          })}\n        />\n      </button>\n      {open && (\n        <div\n          className=\"accordian--content\"\n          id=\"accordian-content\"\n          aria-labelledby=\"accordian-header\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Accordian;\n","import AboutAccordian from \"./AboutAccordian\";\n\nexport default AboutAccordian;\n","import React, { FunctionComponent, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport cx from \"classnames\";\n\nimport \"./AboutAccordian.scss\";\n\ninterface IProps {\n  text: string;\n}\n\nconst AboutAccordian: FunctionComponent<IProps> = ({ text }) => {\n  const [open, toggleAccordian] = useState(false);\n\n  return (\n    <div className=\"about-accordian\">\n      {open && (\n        <div\n          className=\"about-accordian--content\"\n          id=\"accordian-content\"\n          aria-labelledby=\"accordian-header\"\n        >\n          {text}\n        </div>\n      )}\n      <button\n        className={cx(\n          \"flex-container flex-container--align-center flex-container--justify about-accordian--button\",\n          {\n            \"about-accordian--button--open\": open\n          }\n        )}\n        onClick={() => toggleAccordian(!open)}\n        aria-expanded={open}\n        aria-controls=\"accordian-content\"\n        id=\"accordian-header\"\n      >\n        <p>{open ? \"Hide\" : \"Read about us\"}</p>\n        <FontAwesomeIcon\n          icon=\"chevron-down\"\n          className={cx(\"about-accordian--icon\", {\n            \"about-accordian--icon--open\": open\n          })}\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default AboutAccordian;\n","import Breadcrumb from './Breadcrumb'\n\nexport default Breadcrumb","import React, { FunctionComponent } from \"react\";\n\nimport \"./Breadcrumb.scss\";\n\ninterface ICrumb {\n  text: string;\n  url: string;\n}\n\ninterface IProps {\n  crumbs: ICrumb[];\n}\n\nconst Breadcrumb: FunctionComponent<IProps> = ({ crumbs }) => (\n  <div className=\"flex-container flex-container--no-padding\">\n    <ul className=\"breadcrumb flex-container flex-container--no-padding flex-container--no-space\">\n      {crumbs.map((crumb: ICrumb, i: number) => (\n        <div key={crumb.text} className=\"breadcrumb--crumb\">\n          {crumb.url ? (\n            <a href={crumb.url}>\n              <li>{crumb.text}</li>\n            </a>\n          ) : (\n            <li className=\"breadcrumb--crumb--active\">{crumb.text}</li>\n          )}\n          {i !== crumbs.length - 1 && (\n            <p className=\"breadcrumb--icon\">&#8250;</p>\n          )}\n        </div>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default Breadcrumb;\n","import PaginationControl from \"./Pagination\";\n\nexport default PaginationControl;\n","import React, { FunctionComponent, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Pagination from \"rc-pagination\";\nimport \"rc-pagination/assets/index.css\";\n// @ts-ignore\nimport localeInfo from \"rc-pagination/lib/locale/en_GB\";\n\nimport \"./Pagination.scss\";\n\ninterface IProps {\n  totalItems: number;\n  itemsPerPage: number;\n  currentPage: number;\n}\n\nconst PaginationControl: FunctionComponent<IProps> = ({\n  currentPage,\n  totalItems,\n  itemsPerPage\n}) => {\n  useEffect(() => {\n    // this package has an input for the current page with no way to override it, remove this on load and replace with a div for styling\n    const input = document.getElementsByTagName(\"input\");\n\n    const paginationCount = document.createElement(\"div\");\n    paginationCount.textContent = `${currentPage}`;\n    paginationCount.className = \"pagination--label--current\";\n\n    input[0].replaceWith(paginationCount);\n  }, [currentPage]);\n\n  return (\n    // the package does not recognise simple as a prop type so have to ts-ignore\n\n    // @ts-ignore\n    <Pagination\n      simple\n      className=\"pagination\"\n      defaultCurrent={1}\n      current={currentPage}\n      total={totalItems}\n      pageSize={itemsPerPage}\n      locale={localeInfo}\n      prevIcon={\n        currentPage !== 1 && (\n          <div className=\"pagination--label\">\n            <FontAwesomeIcon\n              icon=\"chevron-left\"\n              className=\"pagination--label--icon-left\"\n            />{\" \"}\n            <span>Last page</span>\n          </div>\n        )\n      }\n      nextIcon={\n        <div className=\"pagination--label\">\n          <span>Next page</span>\n          <FontAwesomeIcon\n            icon=\"chevron-right\"\n            className=\"pagination--label--icon-right\"\n          />\n        </div>\n      }\n    />\n  );\n};\n\nexport default PaginationControl;\n","import Button from './Button'\n\nexport default Button","import React, { FunctionComponent } from \"react\";\nimport cx from \"classnames\";\n\nimport \"./Button.scss\";\n\ninterface IProps {\n  text: string;\n  type?: \"submit\" | \"reset\" | \"button\";\n  disabled?: boolean;\n  onClick: () => void;\n  twoCol?: boolean;\n  small?: boolean;\n  filter?: boolean;\n}\n\nconst Button: FunctionComponent<IProps> = ({\n  text,\n  type = \"button\",\n  disabled,\n  onClick,\n  twoCol,\n  small,\n  filter\n}) => (\n  <button\n    disabled={disabled}\n    type={type}\n    onClick={onClick}\n    className={cx(\"button\", {\n      \"button--two-col\": twoCol,\n      \"button--small\": small,\n      \"button--filter\": filter\n    })}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\n\nimport \"./PatternLibrary.scss\";\nimport Accordian from \"./Accordian\";\nimport AboutAccordian from \"./AboutAccordian\";\nimport Breadcrumb from \"./Breadcrumb\";\nimport PaginationControl from \"./Pagination\";\nimport Button from \"./Button\";\n\nconst PatternLibrary = () => (\n  <div className=\"flex-container flex-container--no-padding\">\n    <div className=\"flex-col--12\">\n      <h1 className=\"heading--xl\">Welcome</h1>\n      <p className=\"description\">XL Heading</p>\n\n      <h1 className=\"title--alt\">Welcome</h1>\n      <p className=\"description\">Alt title</p>\n\n      <h2 className=\"heading--l\">Read other peoples experiences</h2>\n      <p className=\"description\">L Heading</p>\n\n      <h3 className=\"heading--m\">Contact us</h3>\n      <p className=\"description\">M Heading</p>\n\n      <h4 className=\"heading--s\">Email us at</h4>\n      <p className=\"description\">S Heading</p>\n\n      <h5 className=\"heading--xs\">Read whole story</h5>\n      <p className=\"description\">XS Heading</p>\n\n      <p className=\"body--l\">\n        Collecting first-person accounts of voices, from people who hear voices.\n        This is a place where you can explore and share…\n      </p>\n      <p className=\"description\">L Body</p>\n\n      <p className=\"body--m\">info@hearing-voices.org</p>\n      <p className=\"description\">M Body</p>\n\n      <p className=\"body--m-alt\">About this project</p>\n      <p className=\"description\">M Body (Alt)</p>\n\n      <p className=\"body--s\">Created by Hearing Voices Network England</p>\n      <p className=\"description\">S Body</p>\n\n      <p className=\"body--s-alt\">\n        Signing up is secure and how much you share is up to you, you can\n        always…\n      </p>\n      <p className=\"description\">S Body (Alt)</p>\n\n      <p className=\"body--xs\">\n        Signing up is secure and how much you share is up to you, you can\n        always…\n      </p>\n      <p className=\"description\">XS Body</p>\n\n      <p className=\"story\">\n        I was terrorized by three male voices who talked about me, narrating my\n        movements and…\n      </p>\n      <p className=\"description\">Story</p>\n    </div>\n\n    <div className=\"section flex-col--12\">\n      <Accordian\n        title=\"11 Jan 2019\"\n        green={true}\n        subtitle=\"1 private, 1 in public\"\n      >\n        <p>Accordian content</p>\n      </Accordian>\n    </div>\n    <div className=\"section flex-col--12\">\n      <Accordian title=\"28 Dec 2018\">\n        <p>Accordian content</p>\n      </Accordian>\n    </div>\n\n    <div className=\"section flex-col--12\">\n      <AboutAccordian text=\"Collecting first-person accounts of voices, from people who hear voices. This is a place where you can explore and share your experiences anonymously.\"></AboutAccordian>\n    </div>\n    <div className=\"section flex-col--12\">\n      <Breadcrumb\n        crumbs={[\n          { text: \"Home\", url: \"/\" },\n          { text: \"Experiences\", url: \"/\" },\n          { text: \"Selected Experience\", url: \"\" }\n        ]}\n      />\n    </div>\n    <div className=\"section flex-col--12\">\n      <PaginationControl totalItems={20} itemsPerPage={5} currentPage={1} />\n    </div>\n\n    <div className=\"section flex-col--12\">\n      <Button text=\"Browse experiences\" onClick={() => console.log(\"Click!\")} />\n    </div>\n    <div className=\"section flex-col--12\">\n      <Button\n        text=\"Browse experiences\"\n        onClick={() => console.log(\"Click!\")}\n        disabled={true}\n      />\n      <div className=\"section flex-col--12\">\n        <Button\n          twoCol={true}\n          text=\"Sign up and share\"\n          onClick={() => console.log(\"Click!\")}\n        />\n      </div>\n      <div className=\"section flex-col--12\">\n        <Button\n          text=\"New story\"\n          small={true}\n          onClick={() => console.log(\"Click!\")}\n        />\n      </div>\n      <div className=\"section flex-col--12\">\n        <Button\n          text=\"Filter by\"\n          filter={true}\n          onClick={() => console.log(\"Click!\")}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nexport default PatternLibrary;\n","import React, { FunctionComponent } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./styles/main.scss\";\n\nimport PatternLibrary from \"./components/PatternLibrary\";\n\nlibrary.add(fas);\n\nconst App: FunctionComponent = () => (\n  <div className=\"flex-container\">\n    <div className=\"flex-col--12\" style={{ marginTop: \"20px\" }}>\n      <PatternLibrary />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}