AWSTemplateFormatVersion: '2010-09-09'
Description: Create the infrastructure needed to run the Connecting Voices Frontend

Parameters:
  Uuid:
    Default: c92ca114-c132-45b6-ac17-526a025cd3a4
    Description: The unique ID for this stack.
    MaxLength: '36'
    MinLength: '36'
    Type: String

  Environment:
    Description: The environment this stack is for (e.g. production or staging).
    MinLength: '1'
    Type: String

  CertificateArn:
    Description: The ARN for the Frontend load balancer SSL certificate.
    Type: String

  TaskCount:
    Description: The number of Frontend containers to run.
    Type: Number
    Default: '0'
    MinValue: '0'
    ConstraintDescription: Must be 1 or more.

  Vpc:
    Description: The Virtual Private Cloud (VPC) to launch the stack in.
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: The list of subnet IDs, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC).
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For connecting to the Frontend load balancer
      SecurityGroupIngress:
        - Description: HTTP access from the public
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTPS access from the public
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For connecting to the ECS service containers.
      SecurityGroupIngress:
        - Description: Full access from the load balancer
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupName:
            Ref: LoadBalancerSecurityGroup

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  Cluster:
    Type: AWS::ECS::Cluster

  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Join:
          - "-"
          - - frontend
            - Ref: Environment
            - Ref: Uuid
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority":1,
                "description": "Remove untagged images older than 1 week",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 7
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - "-"
          - - frontend
            - Ref: Environment
            - Ref: Uuid
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join:
          - "-"
          - - frontend
            - Ref: Environment
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Ref: ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: frontend
          Image:
            Fn::Join:
              - .
              - - Ref: AWS::AccountId
                - dkr.ecr
                - Ref: AWS::Region
                - Fn::Join:
                    - /
                    - - amazonaws.com
                      - Ref: DockerRepository
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecs

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LoadBalancerSecurityGroup
            - GroupId
      Subnets:
        Ref: Subnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: Vpc
    DependsOn:
      - LoadBalancer

  LoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301

  LoadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      Certificates:
        - CertificateArn:
            Ref: CertificateArn

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: frontend
      Cluster:
        Ref: Cluster
      TaskDefinition:
        Ref: TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount:
        Ref: TaskCount
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn:
            Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ECSServiceSecurityGroup
                - GroupId
          Subnets:
            Ref: Subnets
    DependsOn:
      - LoadBalancerHttpListener
      - LoadBalancerHttpsListener

  CiUser:
    Type: AWS::IAM::User
    Properties:
      UserName:
        Fn::Join:
          - "-"
          - - ci
            - frontend
            - Ref: Environment
      Policies:
        - PolicyName: CiUserPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: ecr:*
                Effect: Allow
                Resource: '*'
              - Action: ecs:UpdateService
                Effect: Allow
                Resource: '*'
              - Action: secretsmanager:GetSecretValue
                Effect: Allow
                Resource: '*'
